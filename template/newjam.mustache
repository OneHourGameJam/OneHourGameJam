<h1 class="pageHeading">Schedule {{CONFIG.VALUES.JAM_PHRASE_SINGULAR}}</h1>
<div class="pageDescription">
	Use this form to schedule a new {{CONFIG.VALUES.JAM_PHRASE_SINGULAR}}. Select a {{CONFIG.VALUES.THEME_PHRASE_SINGULAR}}, date and time, and a colour range by changing the hue, saturation and brigthtness values or by manually entering colour hex codes.
</div>

<form method='post'>
	{{> csrf_token}}
	<div class="form-group">
		<label for="theme">{{CONFIG.VALUES.JAM_PHRASE_SINGULAR}} {{CONFIG.VALUES.THEME_PHRASE_SINGULAR}}</label> (Top {{CONFIG.VALUES.THEME_PHRASE_PLURAL}}:{{#themes.top_themes}} <a href='#' id="select_theme_{{theme_button_id}}" onclick='SelectThemeForJam("select_theme_{{theme_button_id}}"); return false;'>{{{theme}}}</a>;{{/themes.top_themes}})
		<input type="text" class="form-control" id="theme" name='{{{forms.form.newjam.theme}}}' placeholder="{{CONFIG.VALUES.JAM_PHRASE_SINGULAR}} {{CONFIG.VALUES.THEME_PHRASE_SINGULAR}}" required>
	</div>
	<div class="form-group">
		<label for="default_icon_url">Default {{CONFIG.VALUES.GAME_PHRASE_SINGULAR}} icon</label> (Used by {{CONFIG.VALUES.GAME_PHRASE_PLURAL}} without a custom icon)
		<input type="text" class="form-control" id="default_icon_url" name='{{{forms.form.newjam.default_icon_url}}}' placeholder="Default {{CONFIG.VALUES.GAME_PHRASE_SINGULAR}} icon" value="{{{CONFIG.VALUES.DEFAULT_GAME_ICON_URL}}}" required>
	</div>
    <div class="form-group">
        <label for="default_icon_url">Event name</label> (Optional; if the jam is commemorating or otherwise referencing something)
        <input type="text" class="form-control" id="event_name" name='{{{forms.form.newjam.event_name}}}' placeholder="Event Name" value="">
    </div>
	<div class="form-group">
		<label for="date">{{CONFIG.VALUES.JAM_PHRASE_SINGULAR}} date</label>
		<input type="date" class="form-control" id="date" name='{{{forms.form.newjam.date}}}' placeholder="" value='{{page.next_jam_suggested_date}}' required>
	</div>
	<div class="form-group">
		<label for="time">{{CONFIG.VALUES.JAM_PHRASE_SINGULAR}} start time (in UTC - {{CONFIG.VALUES.JAM_PHRASE_SINGULAR}} {{CONFIG.VALUES.THEME_PHRASE_SINGULAR}} will only become visible once this date and time passes)</label>
		<input type="time" class="form-control" id="time" name='{{{forms.form.newjam.time}}}' value='{{page.next_jam_suggested_time}}' placeholder="" required>
	</div>
	<div class="form-group">
		<label for="jamcolors">{{CONFIG.VALUES.JAM_PHRASE_SINGULAR}} colours (Users can choose between these to customize their {{CONFIG.VALUES.GAME_PHRASE_SINGULAR}}'s appearance on the site)</label><br>

		<label for="jamcolors">Number of Colours</label>
		<div class="slidecontainer">
			<input type="number" min="1" max="{{CONFIG.VALUES.MAX_COLORS_FOR_JAM}}" value="{{CONFIG.VALUES.DEFAULT_NUMBER_OF_COLORS}}" class="form-control" id="NumberOfColors" onchange="UpdateNumberOfColors();">
		</div>

		<label for="jamcolors">Saturation</label>
		<div class="slidecontainer">
			<input type="range" min="0" max="256" value="{{CONFIG.VALUES.DEFAULT_SATURATION}}" class="slider" id="Saturation" oninput="UpdateAutoJamcolors();">
		</div>

		<label for="jamcolors">Brightness</label>
		<div class="slidecontainer">
			<input type="range" min="0" max="256" value="{{CONFIG.VALUES.DEFAULT_BRIGHTNESS}}" class="slider" id="Brightness" oninput="UpdateAutoJamcolors();">
		</div>

		<label for="jamcolors">Min Hue</label>
		<div class="slidecontainer">
			<input type="range" min="0" max="256" value="{{CONFIG.VALUES.DEFAULT_HUE_MIN}}" class="slider" id="MinHue" oninput="UpdateAutoJamcolors();">
		</div>

		<label for="jamcolors">Max Hue</label>
		<div class="slidecontainer">
			<input type="range" min="0" max="256" value="{{CONFIG.VALUES.DEFAULT_HUE_MAX}}" class="slider" id="MaxHue" oninput="UpdateAutoJamcolors();">
		</div>

		<span id="ColorPreviews">

		</span>
	</div>
	<button type="submit" name='{{{forms.form.action}}}' value='{{{forms.action.newjam}}}' class="btn btn-default">New {{CONFIG.VALUES.JAM_PHRASE_SINGULAR}}</button>
</form>
<script type='text/javascript'>
	function SelectThemeForJam(themeButtonID){
		var themeText = $("#"+themeButtonID).text();
		$("#theme").val(themeText);
	}

	locked_colors = {};
	function UpdateNumberOfColors(){
		$("#ColorPreviews").empty();
		var numberOfColors = parseInt($("#NumberOfColors").val());
		for(var i = 0; i < numberOfColors; i++){
			$("#ColorPreviews").append(jQuery.parseHTML(`
			<div class="input-group">
  				<span class="input-group-addon" id="sizing-addon1">
					ðŸ”’    <input type="checkbox" onchange='SetColorLock(this, ${i})' ${locked_colors[i]?"checked":""}>
				</span>
				<input type='text' class='form-control color-preview' id='jamcolor${i}' name='{{{forms.form.newjam.jam_color}}}${i}' value='' placeholder='Color Hex' onchange='PreviewJamColor(this);' style='background-color: #ffffff; color: black;' maxlength='6' ${locked_colors[i]?"disabled":""}>
			</div>`
			));
		}
		UpdateAutoJamcolors();
	}

	function UpdateAutoJamcolors(){
		var sat = parseInt($("#Saturation").val());
		var bri = parseInt($("#Brightness").val());
		var minHue = parseInt($("#MinHue").val());
		var maxHue = parseInt($("#MaxHue").val());
		var numberOfColors = $(".color-preview").length;

		var hueDiff = (maxHue - minHue);
		if(hueDiff < 0){
			maxHue += 256;
			hueDiff = (maxHue - minHue);
		}

		for(var i = 0; i < numberOfColors; i++){
			var hex_color;

			if(locked_colors[i]) // check if color is locked
				hex_color = locked_colors[i];
			else {
				var percent = (1.0 * i) / (numberOfColors - 1);
				var hue = minHue + (percent * hueDiff);
				var rgb = hsl2rgb((hue % 256) / 255, sat / 255, bri / 255);

				var r = rgb.r<<16;
				var g = rgb.g<<8;
				var b = rgb.b;
				hex_color = (r+g+b).toString(16);
			}

			$("#jamcolor"+i).val(hex_color);
			$("#jamcolor"+i).css("background-color", "#"+hex_color);
		}
	}

	function SetColorLock(checkbox, color){
		$("#jamcolor"+color).prop('disabled', checkbox.checked);
		if(checkbox.checked)
			locked_colors[color] = $("#jamcolor"+color).val();
		else if (locked_colors[color])
			locked_colors[color] = undefined;
	}

	function PreviewJamColor(colorInputField){
		var colorHex = $(colorInputField).val();
		$(colorInputField).css("background-color", "#"+colorHex);
	}

	function hsl2rgb(h, s, l) {
		var r, g, b;
		if (s == 0) {
			r = g = b = l; // achromatic
		} else {
			function hue2rgb(p, q, t) {
				if (t < 0) t += 1;
				if (t > 1) t -= 1;
				if (t < 1/6) return p + (q - p) * 6 * t;
				if (t < 1/2) return q;
				if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
				return p;
			}

			var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
			var p = 2 * l - q;

			r = hue2rgb(p, q, h + 1/3);
			g = hue2rgb(p, q, h);
			b = hue2rgb(p, q, h - 1/3);
		}

		return { r: Math.min(255, parseInt(r * 255)), g: Math.min(255, parseInt(g * 255)), b: Math.min(255, parseInt(b * 255)) };
	}

	UpdateNumberOfColors();
	UpdateAutoJamcolors();
</script>